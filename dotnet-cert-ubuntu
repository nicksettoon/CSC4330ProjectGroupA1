#!/bin/bash

echo '##==========INSTALLING DOTNET DEV CA/CERT==========##'
pwd

sudo apt-get install libnss3-tools

SETUP_PTH=$HOME/.devcerts/dotnet
DOTNET_ASSEMBLY_NAME=Backend

if [ ! -d $SETUP_PTH ]; then
    mkdir -p $SETUP_PTH
    if [ $? -eq 1 ]; then
        exit
    fi
fi

KEYFILE=$SETUP_PTH/dotnet-devcert.key
CRTFILE=$SETUP_PTH/dotnet-devcert.crt
PFXFILE=$SETUP_PTH/dotnet-devcert.pfx

NSSDB_PATHS=(
    "$HOME/.pki/nssdb"
#    "$HOME/snap/chromium/current/.pki/nssdb"
#    "$HOME/snap/postman/current/.pki/nssdb"
)

CONF_PATH=$SETUP_PTH/localhost.conf
cat >> $CONF_PATH <<EOF
[req]
prompt                  = no
default_bits            = 2048
distinguished_name      = subject
req_extensions          = req_ext
x509_extensions         = x509_ext

[ subject ]
commonName              = localhost

[req_ext]
basicConstraints        = critical, CA:true
subjectAltName          = @alt_names

[x509_ext]
basicConstraints        = critical, CA:true
keyUsage                = critical, keyCertSign, cRLSign, digitalSignature,keyEncipherment
extendedKeyUsage        = critical, serverAuth
subjectAltName          = critical, @alt_names
1.3.6.1.4.1.311.84.1.1  = ASN1:UTF8String:ASP.NET Core HTTPS development certificate # Needed to get it imported by dotnet dev-certs

[alt_names]
DNS.1                   = localhost
DNS.2                   = 127.0.0.1
EOF

function configure_nssdb() {
    echo "Configuring nssdb for $1"
    certutil -d sql:$1 -D -n dotnet-devcert
    certutil -d sql:$1 -A -t "CP,," -n dotnet-devcert -i $CRTFILE
}

function user_secrets(){
    dotnet user-secrets --project Backend/Backend.csproj init
    if [ "$PASSWD" != "" ]; then
        echo "user-secrets2"
        dotnet user-secrets --project Backend/Backend.csproj set "Kestrel:Certificates:Development:Password" "$PASSWD"
    else
        echo "don't have access to cert password"
        exit
    fi
}

echo 'Please enter the password you  would like to use for the certificate.'
read -s PASSWD

openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout $KEYFILE -out $CRTFILE -config $CONF_PATH --passout pass:$PASSWD

openssl pkcs12 -export -out $PFXFILE -inkey $KEYFILE -in $CRTFILE --passout pass:$PASSWD

for NSSDB in ${NSSDB_PATHS[@]}; do
    if [ -d "$NSSDB" ]; then
        configure_nssdb $NSSDB
    fi
done

sudo rm /etc/ssl/certs/dotnet-devcert.pem
sudo cp $CRTFILE "/usr/local/share/ca-certificates"
sudo update-ca-certificates

user_secrets

if [ "$PASSWD" != "" ]; then
    echo "dev-cert1"
    dotnet dev-certs https --clean --import $PFXFILE -p $PASSWD
    echo "dev-cert2"
    dotnet dev-certs https -ep $HOME/.aspnet/https/$DOTNET_ASSEMBLY_NAME.pfx -p $PASSWD
    else
        echo "don't have access to cert password"
        exit
fi

# rm -R $SETUP_PTH
